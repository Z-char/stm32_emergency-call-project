
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000389c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a30  08003a30  00004a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a58  08003a58  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a60  08003a60  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  08003ad0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003ad0  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f21  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b40  00000000  00000000  0000dfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0000fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000634  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163a8  00000000  00000000  00010964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a27d  00000000  00000000  00026d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870de  00000000  00000000  00030f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000b80ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ba724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a18 	.word	0x08003a18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003a18 	.word	0x08003a18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <log_error_to_flash>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// error_code = 1: message is not sent correctly.
// error_code = 2: receive wrong feedback.
// error_code = 3: didn't receive feedback.
void log_error_to_flash(uint32_t error_code) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    uint32_t address = 0x08080000;
 80004cc:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <log_error_to_flash+0x30>)
 80004ce:	60fb      	str	r3, [r7, #12]
    HAL_FLASH_Unlock();
 80004d0:	f000 fdb6 	bl	8001040 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, error_code);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	461c      	mov	r4, r3
 80004da:	4615      	mov	r5, r2
 80004dc:	4622      	mov	r2, r4
 80004de:	462b      	mov	r3, r5
 80004e0:	68f9      	ldr	r1, [r7, #12]
 80004e2:	2002      	movs	r0, #2
 80004e4:	f000 fd58 	bl	8000f98 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80004e8:	f000 fdcc 	bl	8001084 <HAL_FLASH_Lock>
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bdb0      	pop	{r4, r5, r7, pc}
 80004f4:	08080000 	.word	0x08080000

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fb11 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f85d 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8f1 	bl	80006ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800050a:	f000 f8c5 	bl	8000698 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2110      	movs	r1, #16
 8000512:	4828      	ldr	r0, [pc, #160]	@ (80005b4 <main+0xbc>)
 8000514:	f001 f88a 	bl	800162c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	@ 0x40
 800051c:	4825      	ldr	r0, [pc, #148]	@ (80005b4 <main+0xbc>)
 800051e:	f001 f885 	bl	800162c <HAL_GPIO_WritePin>
  char receiveData = '\0';
 8000522:	2300      	movs	r3, #0
 8000524:	70fb      	strb	r3, [r7, #3]
  const char sendData = '1';
 8000526:	2331      	movs	r3, #49	@ 0x31
 8000528:	70bb      	strb	r3, [r7, #2]
  while (1)
  {
	  if (HAL_UART_Receive(&huart1, (uint8_t*)&receiveData, 1, 3000) == HAL_OK) {
 800052a:	1cf9      	adds	r1, r7, #3
 800052c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000530:	2201      	movs	r2, #1
 8000532:	4821      	ldr	r0, [pc, #132]	@ (80005b8 <main+0xc0>)
 8000534:	f001 fe07 	bl	8002146 <HAL_UART_Receive>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d135      	bne.n	80005aa <main+0xb2>
		  if (receiveData == 'H') {
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	2b48      	cmp	r3, #72	@ 0x48
 8000542:	d1f2      	bne.n	800052a <main+0x32>
			  if (HAL_UART_Transmit(&huart1, (uint8_t*)&sendData, 1, 1000) != HAL_OK) {
 8000544:	1cb9      	adds	r1, r7, #2
 8000546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054a:	2201      	movs	r2, #1
 800054c:	481a      	ldr	r0, [pc, #104]	@ (80005b8 <main+0xc0>)
 800054e:	f001 fd6f 	bl	8002030 <HAL_UART_Transmit>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <main+0x66>
				  log_error_to_flash(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ffb3 	bl	80004c4 <log_error_to_flash>
			  }
			  for (int i = 0; i < 30; ++i) {
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e01e      	b.n	80005a2 <main+0xaa>
				  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	@ 0x40
 8000568:	4812      	ldr	r0, [pc, #72]	@ (80005b4 <main+0xbc>)
 800056a:	f001 f85f 	bl	800162c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2110      	movs	r1, #16
 8000572:	4810      	ldr	r0, [pc, #64]	@ (80005b4 <main+0xbc>)
 8000574:	f001 f85a 	bl	800162c <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057c:	f000 fb44 	bl	8000c08 <HAL_Delay>
				  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <main+0xbc>)
 8000586:	f001 f851 	bl	800162c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2140      	movs	r1, #64	@ 0x40
 800058e:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <main+0xbc>)
 8000590:	f001 f84c 	bl	800162c <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 8000594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000598:	f000 fb36 	bl	8000c08 <HAL_Delay>
			  for (int i = 0; i < 30; ++i) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b1d      	cmp	r3, #29
 80005a6:	dddd      	ble.n	8000564 <main+0x6c>
 80005a8:	e7bf      	b.n	800052a <main+0x32>
			  }
		  }
	  } else {
		  printf("Receive timeout\n");
 80005aa:	4804      	ldr	r0, [pc, #16]	@ (80005bc <main+0xc4>)
 80005ac:	f002 fea0 	bl	80032f0 <puts>
	  if (HAL_UART_Receive(&huart1, (uint8_t*)&receiveData, 1, 3000) == HAL_OK) {
 80005b0:	e7bb      	b.n	800052a <main+0x32>
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000
 80005b8:	20000084 	.word	0x20000084
 80005bc:	08003a30 	.word	0x08003a30

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	@ 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 ff6e 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <SystemClock_Config+0xd0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a28      	ldr	r2, [pc, #160]	@ (8000690 <SystemClock_Config+0xd0>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd4>)
 800060e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063e:	2304      	movs	r3, #4
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f808 	bl	8001660 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000656:	f000 f8cd 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fa6a 	bl	8001b50 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000682:	f000 f8b7 	bl	80007f4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <MX_USART1_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f001 fc5e 	bl	8001f90 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f88b 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000084 	.word	0x20000084
 80006e8:	40011000 	.word	0x40011000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b38      	ldr	r3, [pc, #224]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a37      	ldr	r2, [pc, #220]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b35      	ldr	r3, [pc, #212]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b31      	ldr	r3, [pc, #196]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a30      	ldr	r2, [pc, #192]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b2e      	ldr	r3, [pc, #184]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a29      	ldr	r2, [pc, #164]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a22      	ldr	r2, [pc, #136]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_GPIO_Init+0xfc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_Pin|LD2_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2130      	movs	r1, #48	@ 0x30
 8000776:	481d      	ldr	r0, [pc, #116]	@ (80007ec <MX_GPIO_Init+0x100>)
 8000778:	f000 ff58 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2140      	movs	r1, #64	@ 0x40
 8000780:	481a      	ldr	r0, [pc, #104]	@ (80007ec <MX_GPIO_Init+0x100>)
 8000782:	f000 ff53 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <MX_GPIO_Init+0x104>)
 800079e:	f000 fdc1 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : tx_pin_Pin rx_pin_Pin */
  GPIO_InitStruct.Pin = tx_pin_Pin|rx_pin_Pin;
 80007a2:	230c      	movs	r3, #12
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b2:	2307      	movs	r3, #7
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <MX_GPIO_Init+0x100>)
 80007be:	f000 fdb1 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_Pin LD2_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = led_Pin|LD2_Pin|buzzer_Pin;
 80007c2:	2370      	movs	r3, #112	@ 0x70
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_GPIO_Init+0x100>)
 80007da:	f000 fda3 	bl	8001324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	@ 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020800 	.word	0x40020800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6453      	str	r3, [r2, #68]	@ 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083e:	2007      	movs	r0, #7
 8000840:	f000 fad6 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a1d      	ldr	r2, [pc, #116]	@ (80008e4 <HAL_UART_MspInit+0x94>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d134      	bne.n	80008dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6453      	str	r3, [r2, #68]	@ 0x44
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a14      	ldr	r2, [pc, #80]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = rx_Pin|tx_Pin;
 80008aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008bc:	2307      	movs	r3, #7
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4809      	ldr	r0, [pc, #36]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 80008c8:	f000 fd2c 	bl	8001324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2025      	movs	r0, #37	@ 0x25
 80008d2:	f000 fa98 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d6:	2025      	movs	r0, #37	@ 0x25
 80008d8:	f000 fab1 	bl	8000e3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40011000 	.word	0x40011000
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 f93f 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000954:	4802      	ldr	r0, [pc, #8]	@ (8000960 <USART1_IRQHandler+0x10>)
 8000956:	f001 fc8d 	bl	8002274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000084 	.word	0x20000084

08000964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
  }

  return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e009      	b.n	80009c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf1      	blt.n	80009b0 <_write+0x12>
  }
  return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_close>:

int _close(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_isatty>:

int _isatty(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	@ (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f002 fd6c 	bl	800354c <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20018000 	.word	0x20018000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	200000cc 	.word	0x200000cc
 8000aa8:	20000240 	.word	0x20000240

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f002 fd2b 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fcf9 	bl	80004f8 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b14:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 8000b18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b1c:	20000240 	.word	0x20000240

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f94f 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe52 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f967 	bl	8000e5a <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f92f 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200000d0 	.word	0x200000d0

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000d0 	.word	0x200000d0

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	@ (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	@ (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	@ 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff29 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff3e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff31 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff feb6 	bl	8000bf0 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d008      	beq.n	8000ea4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e052      	b.n	8000f4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0216 	bic.w	r2, r2, #22
 8000eb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ec2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <HAL_DMA_Abort+0x62>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0208 	bic.w	r2, r2, #8
 8000ee2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef4:	e013      	b.n	8000f1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ef6:	f7ff fe7b 	bl	8000bf0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d90c      	bls.n	8000f1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2220      	movs	r2, #32
 8000f08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e015      	b.n	8000f4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e4      	bne.n	8000ef6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f30:	223f      	movs	r2, #63	@ 0x3f
 8000f32:	409a      	lsls	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d004      	beq.n	8000f70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e00c      	b.n	8000f8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2205      	movs	r2, #5
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0201 	bic.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000faa:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <HAL_FLASH_Program+0xa0>)
 8000fac:	7e1b      	ldrb	r3, [r3, #24]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_FLASH_Program+0x1e>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e03b      	b.n	800102e <HAL_FLASH_Program+0x96>
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_FLASH_Program+0xa0>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fbc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000fc0:	f000 f870 	bl	80010a4 <FLASH_WaitForLastOperation>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d12b      	bne.n	8001026 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d105      	bne.n	8000fe0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000fd4:	783b      	ldrb	r3, [r7, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68b8      	ldr	r0, [r7, #8]
 8000fda:	f000 f91b 	bl	8001214 <FLASH_Program_Byte>
 8000fde:	e016      	b.n	800100e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	68b8      	ldr	r0, [r7, #8]
 8000fec:	f000 f8ee 	bl	80011cc <FLASH_Program_HalfWord>
 8000ff0:	e00d      	b.n	800100e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d105      	bne.n	8001004 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f000 f8c3 	bl	8001188 <FLASH_Program_Word>
 8001002:	e004      	b.n	800100e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f000 f88b 	bl	8001124 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800100e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001012:	f000 f847 	bl	80010a4 <FLASH_WaitForLastOperation>
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_FLASH_Program+0xa4>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	4a07      	ldr	r2, [pc, #28]	@ (800103c <HAL_FLASH_Program+0xa4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <HAL_FLASH_Program+0xa0>)
 8001028:	2200      	movs	r2, #0
 800102a:	761a      	strb	r2, [r3, #24]

  return status;
 800102c:	7dfb      	ldrb	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000d4 	.word	0x200000d4
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_FLASH_Unlock+0x38>)
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da0b      	bge.n	800106a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_FLASH_Unlock+0x38>)
 8001054:	4a09      	ldr	r2, [pc, #36]	@ (800107c <HAL_FLASH_Unlock+0x3c>)
 8001056:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <HAL_FLASH_Unlock+0x38>)
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_FLASH_Unlock+0x40>)
 800105c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_FLASH_Unlock+0x38>)
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	da01      	bge.n	800106a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40023c00 	.word	0x40023c00
 800107c:	45670123 	.word	0x45670123
 8001080:	cdef89ab 	.word	0xcdef89ab

08001084 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <HAL_FLASH_Lock+0x1c>)
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_FLASH_Lock+0x1c>)
 800108e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001092:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <FLASH_WaitForLastOperation+0x78>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80010b6:	f7ff fd9b 	bl	8000bf0 <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80010bc:	e010      	b.n	80010e0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d00c      	beq.n	80010e0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <FLASH_WaitForLastOperation+0x38>
 80010cc:	f7ff fd90 	bl	8000bf0 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d201      	bcs.n	80010e0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e019      	b.n	8001114 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <FLASH_WaitForLastOperation+0x7c>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e8      	bne.n	80010be <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <FLASH_WaitForLastOperation+0x7c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <FLASH_WaitForLastOperation+0x7c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <FLASH_WaitForLastOperation+0x7c>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800110a:	f000 f8a5 	bl	8001258 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0

}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000d4 	.word	0x200000d4
 8001120:	40023c00 	.word	0x40023c00

08001124 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <FLASH_Program_DoubleWord+0x60>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <FLASH_Program_DoubleWord+0x60>)
 8001136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800113a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <FLASH_Program_DoubleWord+0x60>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <FLASH_Program_DoubleWord+0x60>)
 8001142:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <FLASH_Program_DoubleWord+0x60>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <FLASH_Program_DoubleWord+0x60>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800115a:	f3bf 8f6f 	isb	sy
}
 800115e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	000a      	movs	r2, r1
 800116e:	2300      	movs	r3, #0
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	3104      	adds	r1, #4
 8001174:	4613      	mov	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40023c00 	.word	0x40023c00

08001188 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <FLASH_Program_Word+0x40>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	4a0c      	ldr	r2, [pc, #48]	@ (80011c8 <FLASH_Program_Word+0x40>)
 8001198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800119c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <FLASH_Program_Word+0x40>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <FLASH_Program_Word+0x40>)
 80011a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <FLASH_Program_Word+0x40>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <FLASH_Program_Word+0x40>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40023c00 	.word	0x40023c00

080011cc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <FLASH_Program_HalfWord+0x44>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <FLASH_Program_HalfWord+0x44>)
 80011de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80011e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <FLASH_Program_HalfWord+0x44>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <FLASH_Program_HalfWord+0x44>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <FLASH_Program_HalfWord+0x44>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a06      	ldr	r2, [pc, #24]	@ (8001210 <FLASH_Program_HalfWord+0x44>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	801a      	strh	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <FLASH_Program_Byte+0x40>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <FLASH_Program_Byte+0x40>)
 8001226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800122a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <FLASH_Program_Byte+0x40>)
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <FLASH_Program_Byte+0x40>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <FLASH_Program_Byte+0x40>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <FLASH_Program_Byte+0x40>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	78fa      	ldrb	r2, [r7, #3]
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00

08001258 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800125c:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	4a2b      	ldr	r2, [pc, #172]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 8001272:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001274:	4b29      	ldr	r3, [pc, #164]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 8001276:	2210      	movs	r2, #16
 8001278:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800127a:	4b28      	ldr	r3, [pc, #160]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	4a24      	ldr	r2, [pc, #144]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 8001290:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001292:	4b22      	ldr	r3, [pc, #136]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 8001294:	2220      	movs	r2, #32
 8001296:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001298:	4b20      	ldr	r3, [pc, #128]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 80012ae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 80012b2:	2240      	movs	r2, #64	@ 0x40
 80012b4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 80012cc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 80012d0:	2280      	movs	r2, #128	@ 0x80
 80012d2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 80012ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 80012ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <FLASH_SetErrorCode+0xc8>)
 800130a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <FLASH_SetErrorCode+0xc4>)
 800130e:	2202      	movs	r2, #2
 8001310:	60da      	str	r2, [r3, #12]
  }
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023c00 	.word	0x40023c00
 8001320:	200000d4 	.word	0x200000d4

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e159      	b.n	80015f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8148 	bne.w	80015ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	2b02      	cmp	r3, #2
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a2 	beq.w	80015ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b57      	ldr	r3, [pc, #348]	@ (800160c <HAL_GPIO_Init+0x2e8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a56      	ldr	r2, [pc, #344]	@ (800160c <HAL_GPIO_Init+0x2e8>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b54      	ldr	r3, [pc, #336]	@ (800160c <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a52      	ldr	r2, [pc, #328]	@ (8001610 <HAL_GPIO_Init+0x2ec>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a49      	ldr	r2, [pc, #292]	@ (8001614 <HAL_GPIO_Init+0x2f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x202>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a48      	ldr	r2, [pc, #288]	@ (8001618 <HAL_GPIO_Init+0x2f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1fe>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a47      	ldr	r2, [pc, #284]	@ (800161c <HAL_GPIO_Init+0x2f8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1fa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a46      	ldr	r2, [pc, #280]	@ (8001620 <HAL_GPIO_Init+0x2fc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1f6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a45      	ldr	r2, [pc, #276]	@ (8001624 <HAL_GPIO_Init+0x300>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1f2>
 8001512:	2304      	movs	r3, #4
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001516:	2307      	movs	r3, #7
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	@ (8001610 <HAL_GPIO_Init+0x2ec>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001546:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <HAL_GPIO_Init+0x304>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156a:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001570:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <HAL_GPIO_Init+0x304>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001594:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <HAL_GPIO_Init+0x304>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015be:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <HAL_GPIO_Init+0x304>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_GPIO_Init+0x304>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001628 <HAL_GPIO_Init+0x304>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f aea2 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e267      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d075      	beq.n	800176a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800167e:	4b88      	ldr	r3, [pc, #544]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d00c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4b85      	ldr	r3, [pc, #532]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001692:	2b08      	cmp	r3, #8
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b82      	ldr	r3, [pc, #520]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016a2:	d10b      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4b7e      	ldr	r3, [pc, #504]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05b      	beq.n	8001768 <HAL_RCC_OscConfig+0x108>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d157      	bne.n	8001768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e242      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x74>
 80016c6:	4b76      	ldr	r3, [pc, #472]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a75      	ldr	r2, [pc, #468]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x98>
 80016de:	4b70      	ldr	r3, [pc, #448]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6f      	ldr	r2, [pc, #444]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b6d      	ldr	r3, [pc, #436]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6c      	ldr	r2, [pc, #432]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016f8:	4b69      	ldr	r3, [pc, #420]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a68      	ldr	r2, [pc, #416]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b66      	ldr	r3, [pc, #408]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a65      	ldr	r2, [pc, #404]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fa6a 	bl	8000bf0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fa66 	bl	8000bf0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	@ 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e207      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b5b      	ldr	r3, [pc, #364]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0xc0>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fa56 	bl	8000bf0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fa52 	bl	8000bf0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	@ 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1f3      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b51      	ldr	r3, [pc, #324]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0xe8>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d063      	beq.n	800183e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001776:	4b4a      	ldr	r3, [pc, #296]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800178a:	2b08      	cmp	r3, #8
 800178c:	d11c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b44      	ldr	r3, [pc, #272]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e1c7      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4937      	ldr	r1, [pc, #220]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	e03a      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <HAL_RCC_OscConfig+0x244>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fa0b 	bl	8000bf0 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fa07 	bl	8000bf0 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1a8      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4925      	ldr	r1, [pc, #148]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <HAL_RCC_OscConfig+0x244>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f9ea 	bl	8000bf0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff f9e6 	bl	8000bf0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e187      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d036      	beq.n	80018b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_RCC_OscConfig+0x248>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff f9ca 	bl	8000bf0 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff f9c6 	bl	8000bf0 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e167      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_RCC_OscConfig+0x240>)
 8001874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x200>
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_OscConfig+0x248>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff f9b3 	bl	8000bf0 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	e00e      	b.n	80018ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff f9af 	bl	8000bf0 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d907      	bls.n	80018ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e150      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	42470000 	.word	0x42470000
 80018a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	4b88      	ldr	r3, [pc, #544]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ea      	bne.n	800188e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8097 	beq.w	80019f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b81      	ldr	r3, [pc, #516]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b7d      	ldr	r3, [pc, #500]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a7c      	ldr	r2, [pc, #496]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b77      	ldr	r3, [pc, #476]	@ (8001ad4 <HAL_RCC_OscConfig+0x474>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d118      	bne.n	8001934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001902:	4b74      	ldr	r3, [pc, #464]	@ (8001ad4 <HAL_RCC_OscConfig+0x474>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a73      	ldr	r2, [pc, #460]	@ (8001ad4 <HAL_RCC_OscConfig+0x474>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190e:	f7ff f96f 	bl	8000bf0 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff f96b 	bl	8000bf0 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e10c      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <HAL_RCC_OscConfig+0x474>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x2ea>
 800193c:	4b64      	ldr	r3, [pc, #400]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001940:	4a63      	ldr	r2, [pc, #396]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	@ 0x70
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x324>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x30c>
 8001952:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6713      	str	r3, [r2, #112]	@ 0x70
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001962:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	@ 0x70
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0x324>
 800196c:	4b58      	ldr	r3, [pc, #352]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001970:	4a57      	ldr	r2, [pc, #348]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	@ 0x70
 8001978:	4b55      	ldr	r3, [pc, #340]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197c:	4a54      	ldr	r2, [pc, #336]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 800197e:	f023 0304 	bic.w	r3, r3, #4
 8001982:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d015      	beq.n	80019b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff f930 	bl	8000bf0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff f92c 	bl	8000bf0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0cb      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	4b49      	ldr	r3, [pc, #292]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0ee      	beq.n	8001994 <HAL_RCC_OscConfig+0x334>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f91a 	bl	8000bf0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f916 	bl	8000bf0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0b5      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ee      	bne.n	80019c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	4a38      	ldr	r2, [pc, #224]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 80019ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a1 	beq.w	8001b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d05c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d141      	bne.n	8001a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <HAL_RCC_OscConfig+0x478>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8ea 	bl	8000bf0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f8e6 	bl	8000bf0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e087      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69da      	ldr	r2, [r3, #28]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	019b      	lsls	r3, r3, #6
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	491b      	ldr	r1, [pc, #108]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x478>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f8bf 	bl	8000bf0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff f8bb 	bl	8000bf0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e05c      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x416>
 8001a94:	e054      	b.n	8001b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_RCC_OscConfig+0x478>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8a8 	bl	8000bf0 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f8a4 	bl	8000bf0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e045      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x444>
 8001ac2:	e03d      	b.n	8001b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e038      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d028      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d121      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d11a      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d111      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cc      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b68      	ldr	r3, [pc, #416]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d90c      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b65      	ldr	r3, [pc, #404]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d044      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e067      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4934      	ldr	r1, [pc, #208]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7fe ffd6 	bl	8000bf0 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7fe ffd2 	bl	8000bf0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d20c      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff36 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08003a40 	.word	0x08003a40
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d20:	b094      	sub	sp, #80	@ 0x50
 8001d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d34:	4b79      	ldr	r3, [pc, #484]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d00d      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x40>
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	f200 80e1 	bhi.w	8001f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x34>
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4e:	e0db      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b73      	ldr	r3, [pc, #460]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d54:	e0db      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d56:	4b73      	ldr	r3, [pc, #460]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d5a:	e0d8      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d66:	4b6d      	ldr	r3, [pc, #436]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	2200      	movs	r2, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d86:	2300      	movs	r3, #0
 8001d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d8e:	4622      	mov	r2, r4
 8001d90:	462b      	mov	r3, r5
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	0159      	lsls	r1, r3, #5
 8001d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da0:	0150      	lsls	r0, r2, #5
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4621      	mov	r1, r4
 8001da8:	1a51      	subs	r1, r2, r1
 8001daa:	6139      	str	r1, [r7, #16]
 8001dac:	4629      	mov	r1, r5
 8001dae:	eb63 0301 	sbc.w	r3, r3, r1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dc0:	4659      	mov	r1, fp
 8001dc2:	018b      	lsls	r3, r1, #6
 8001dc4:	4651      	mov	r1, sl
 8001dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dca:	4651      	mov	r1, sl
 8001dcc:	018a      	lsls	r2, r1, #6
 8001dce:	4651      	mov	r1, sl
 8001dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8001dd4:	4659      	mov	r1, fp
 8001dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dee:	4690      	mov	r8, r2
 8001df0:	4699      	mov	r9, r3
 8001df2:	4623      	mov	r3, r4
 8001df4:	eb18 0303 	adds.w	r3, r8, r3
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	eb49 0303 	adc.w	r3, r9, r3
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	024b      	lsls	r3, r1, #9
 8001e12:	4621      	mov	r1, r4
 8001e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e18:	4621      	mov	r1, r4
 8001e1a:	024a      	lsls	r2, r1, #9
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e22:	2200      	movs	r2, #0
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e2c:	f7fe f9d2 	bl	80001d4 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e38:	e058      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	2200      	movs	r2, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	4611      	mov	r1, r2
 8001e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e54:	4642      	mov	r2, r8
 8001e56:	464b      	mov	r3, r9
 8001e58:	f04f 0000 	mov.w	r0, #0
 8001e5c:	f04f 0100 	mov.w	r1, #0
 8001e60:	0159      	lsls	r1, r3, #5
 8001e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e66:	0150      	lsls	r0, r2, #5
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e72:	4649      	mov	r1, r9
 8001e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e90:	eb63 050b 	sbc.w	r5, r3, fp
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	00eb      	lsls	r3, r5, #3
 8001e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea2:	00e2      	lsls	r2, r4, #3
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	18e3      	adds	r3, r4, r3
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	464b      	mov	r3, r9
 8001eb0:	eb45 0303 	adc.w	r3, r5, r3
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	028b      	lsls	r3, r1, #10
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ecc:	4621      	mov	r1, r4
 8001ece:	028a      	lsls	r2, r1, #10
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	61fa      	str	r2, [r7, #28]
 8001edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ee0:	f7fe f978 	bl	80001d4 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001efc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3750      	adds	r7, #80	@ 0x50
 8001f14:	46bd      	mov	sp, r7
 8001f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200

08001f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000000 	.word	0x20000000

08001f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	@ (8001f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08003a50 	.word	0x08003a50

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f6c:	f7ff ffdc 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0b5b      	lsrs	r3, r3, #13
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	@ (8001f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08003a50 	.word	0x08003a50

08001f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e042      	b.n	8002028 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fc4a 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	@ 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fdff 	bl	8002bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b20      	cmp	r3, #32
 800204e:	d175      	bne.n	800213c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_UART_Transmit+0x2c>
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e06e      	b.n	800213e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	@ 0x21
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206e:	f7fe fdbf 	bl	8000bf0 <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002088:	d108      	bne.n	800209c <HAL_UART_Transmit+0x6c>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e003      	b.n	80020a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020a4:	e02e      	b.n	8002104 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fb9b 	bl	80027ec <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e03a      	b.n	800213e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3302      	adds	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e007      	b.n	80020f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1cb      	bne.n	80020a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	2140      	movs	r1, #64	@ 0x40
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fb67 	bl	80027ec <UART_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08a      	sub	sp, #40	@ 0x28
 800214a:	af02      	add	r7, sp, #8
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	f040 8081 	bne.w	800226a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Receive+0x2e>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e079      	b.n	800226c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2222      	movs	r2, #34	@ 0x22
 8002182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800218c:	f7fe fd30 	bl	8000bf0 <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a6:	d108      	bne.n	80021ba <HAL_UART_Receive+0x74>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d104      	bne.n	80021ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	e003      	b.n	80021c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021c2:	e047      	b.n	8002254 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2120      	movs	r1, #32
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb0c 	bl	80027ec <UART_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e042      	b.n	800226c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	3302      	adds	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e01f      	b.n	8002246 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220e:	d007      	beq.n	8002220 <HAL_UART_Receive+0xda>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_UART_Receive+0xe8>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e008      	b.n	8002240 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800223a:	b2da      	uxtb	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1b2      	bne.n	80021c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ba      	sub	sp, #232	@ 0xe8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80022b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_UART_IRQHandler+0x66>
 80022c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fbc2 	bl	8002a5c <UART_Receive_IT>
      return;
 80022d8:	e25b      	b.n	8002792 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80de 	beq.w	80024a0 <HAL_UART_IRQHandler+0x22c>
 80022e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d106      	bne.n	80022fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80d1 	beq.w	80024a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_UART_IRQHandler+0xae>
 800230a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_UART_IRQHandler+0xd2>
 800232e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f043 0202 	orr.w	r2, r3, #2
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_UART_IRQHandler+0xf6>
 8002352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800236a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <HAL_UART_IRQHandler+0x126>
 8002376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f043 0208 	orr.w	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 81f2 	beq.w	8002788 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_UART_IRQHandler+0x14e>
 80023b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fb4d 	bl	8002a5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023cc:	2b40      	cmp	r3, #64	@ 0x40
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <HAL_UART_IRQHandler+0x17a>
 80023e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d04f      	beq.n	800248e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa55 	bl	800289e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	2b40      	cmp	r3, #64	@ 0x40
 8002400:	d141      	bne.n	8002486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800241c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3314      	adds	r3, #20
 800242a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800242e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800243a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1d9      	bne.n	8002402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d013      	beq.n	800247e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245a:	4a7e      	ldr	r2, [pc, #504]	@ (8002654 <HAL_UART_IRQHandler+0x3e0>)
 800245c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fd75 	bl	8000f52 <HAL_DMA_Abort_IT>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002478:	4610      	mov	r0, r2
 800247a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800247c:	e00e      	b.n	800249c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f99e 	bl	80027c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	e00a      	b.n	800249c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f99a 	bl	80027c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	e006      	b.n	800249c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f996 	bl	80027c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800249a:	e175      	b.n	8002788 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	bf00      	nop
    return;
 800249e:	e173      	b.n	8002788 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	f040 814f 	bne.w	8002748 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8148 	beq.w	8002748 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8141 	beq.w	8002748 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	2b40      	cmp	r3, #64	@ 0x40
 80024e8:	f040 80b6 	bne.w	8002658 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8145 	beq.w	800278c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800250a:	429a      	cmp	r2, r3
 800250c:	f080 813e 	bcs.w	800278c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002516:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002522:	f000 8088 	beq.w	8002636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
 800252c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002530:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002534:	e853 3f00 	ldrex	r3, [r3]
 8002538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800253c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800255e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002562:	e841 2300 	strex	r3, r2, [r1]
 8002566:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800256a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1d9      	bne.n	8002526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800257c:	e853 3f00 	ldrex	r3, [r3]
 8002580:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002596:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800259a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800259e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80025a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e1      	bne.n	8002572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80025be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3314      	adds	r3, #20
 80025ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e3      	bne.n	80025ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025fe:	e853 3f00 	ldrex	r3, [r3]
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002606:	f023 0310 	bic.w	r3, r3, #16
 800260a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002618:	65ba      	str	r2, [r7, #88]	@ 0x58
 800261a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800261e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002620:	e841 2300 	strex	r3, r2, [r1]
 8002624:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e3      	bne.n	80025f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fc1e 	bl	8000e72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002644:	b29b      	uxth	r3, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8c1 	bl	80027d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002652:	e09b      	b.n	800278c <HAL_UART_IRQHandler+0x518>
 8002654:	08002965 	.word	0x08002965
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002660:	b29b      	uxth	r3, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 808e 	beq.w	8002790 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8089 	beq.w	8002790 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	e853 3f00 	ldrex	r3, [r3]
 800268c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80026a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80026a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026aa:	e841 2300 	strex	r3, r2, [r1]
 80026ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80026b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e3      	bne.n	800267e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	623b      	str	r3, [r7, #32]
   return(result);
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3314      	adds	r3, #20
 80026d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026da:	633a      	str	r2, [r7, #48]	@ 0x30
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e3      	bne.n	80026b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	e853 3f00 	ldrex	r3, [r3]
 800270a:	60fb      	str	r3, [r7, #12]
   return(result);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0310 	bic.w	r3, r3, #16
 8002712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002720:	61fa      	str	r2, [r7, #28]
 8002722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	69b9      	ldr	r1, [r7, #24]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	e841 2300 	strex	r3, r2, [r1]
 800272c:	617b      	str	r3, [r7, #20]
   return(result);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e3      	bne.n	80026fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800273a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f847 	bl	80027d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002746:	e023      	b.n	8002790 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_UART_IRQHandler+0x4f4>
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f913 	bl	800298c <UART_Transmit_IT>
    return;
 8002766:	e014      	b.n	8002792 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00e      	beq.n	8002792 <HAL_UART_IRQHandler+0x51e>
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f953 	bl	8002a2c <UART_EndTransmit_IT>
    return;
 8002786:	e004      	b.n	8002792 <HAL_UART_IRQHandler+0x51e>
    return;
 8002788:	bf00      	nop
 800278a:	e002      	b.n	8002792 <HAL_UART_IRQHandler+0x51e>
      return;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_UART_IRQHandler+0x51e>
      return;
 8002790:	bf00      	nop
  }
}
 8002792:	37e8      	adds	r7, #232	@ 0xe8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027fc:	e03b      	b.n	8002876 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d037      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7fe f9f3 	bl	8000bf0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <UART_WaitOnFlagUntilTimeout+0x30>
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e03a      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x8a>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b80      	cmp	r3, #128	@ 0x80
 8002832:	d020      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b40      	cmp	r3, #64	@ 0x40
 8002838:	d01d      	beq.n	8002876 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b08      	cmp	r3, #8
 8002846:	d116      	bne.n	8002876 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f81d 	bl	800289e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2208      	movs	r2, #8
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	429a      	cmp	r2, r3
 8002892:	d0b4      	beq.n	80027fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800289e:	b480      	push	{r7}
 80028a0:	b095      	sub	sp, #84	@ 0x54
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	330c      	adds	r3, #12
 80028ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e5      	bne.n	80028a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3314      	adds	r3, #20
 80028f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e5      	bne.n	80028da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	2b01      	cmp	r3, #1
 8002914:	d119      	bne.n	800294a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	60bb      	str	r3, [r7, #8]
   return(result);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 0310 	bic.w	r3, r3, #16
 800292c:	647b      	str	r3, [r7, #68]	@ 0x44
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002936:	61ba      	str	r2, [r7, #24]
 8002938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	6979      	ldr	r1, [r7, #20]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	613b      	str	r3, [r7, #16]
   return(result);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002958:	bf00      	nop
 800295a:	3754      	adds	r7, #84	@ 0x54
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff ff1e 	bl	80027c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b21      	cmp	r3, #33	@ 0x21
 800299e:	d13e      	bne.n	8002a1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a8:	d114      	bne.n	80029d4 <UART_Transmit_IT+0x48>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d110      	bne.n	80029d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	1c9a      	adds	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	621a      	str	r2, [r3, #32]
 80029d2:	e008      	b.n	80029e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6211      	str	r1, [r2, #32]
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4619      	mov	r1, r3
 80029f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fea3 	bl	8002798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	@ 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b22      	cmp	r3, #34	@ 0x22
 8002a6e:	f040 80ae 	bne.w	8002bce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7a:	d117      	bne.n	8002aac <UART_Receive_IT+0x50>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d113      	bne.n	8002aac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aaa:	e026      	b.n	8002afa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002abe:	d007      	beq.n	8002ad0 <UART_Receive_IT+0x74>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <UART_Receive_IT+0x82>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4619      	mov	r1, r3
 8002b08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d15d      	bne.n	8002bca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0220 	bic.w	r2, r2, #32
 8002b1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d135      	bne.n	8002bc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f023 0310 	bic.w	r3, r3, #16
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7a:	623a      	str	r2, [r7, #32]
 8002b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	69f9      	ldr	r1, [r7, #28]
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e5      	bne.n	8002b5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d10a      	bne.n	8002bb2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fe0b 	bl	80027d4 <HAL_UARTEx_RxEventCallback>
 8002bbe:	e002      	b.n	8002bc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fdf3 	bl	80027ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e002      	b.n	8002bd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	@ 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b0c0      	sub	sp, #256	@ 0x100
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	ea40 0301 	orr.w	r3, r0, r1
 8002c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c30:	f021 010c 	bic.w	r1, r1, #12
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c52:	6999      	ldr	r1, [r3, #24]
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	ea40 0301 	orr.w	r3, r0, r1
 8002c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea4 <UART_SetConfig+0x2cc>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d005      	beq.n	8002c78 <UART_SetConfig+0xa0>
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea8 <UART_SetConfig+0x2d0>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d104      	bne.n	8002c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7ff f976 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c80:	e003      	b.n	8002c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7ff f95d 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 8002c86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c94:	f040 810c 	bne.w	8002eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cba:	4621      	mov	r1, r4
 8002cbc:	eb12 0801 	adds.w	r8, r2, r1
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	eb43 0901 	adc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	462b      	mov	r3, r5
 8002cea:	eb49 0303 	adc.w	r3, r9, r3
 8002cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d06:	460b      	mov	r3, r1
 8002d08:	18db      	adds	r3, r3, r3
 8002d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	eb42 0303 	adc.w	r3, r2, r3
 8002d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d1c:	f7fd fa5a 	bl	80001d4 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4b61      	ldr	r3, [pc, #388]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011c      	lsls	r4, r3, #4
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d50:	4641      	mov	r1, r8
 8002d52:	eb12 0a01 	adds.w	sl, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb43 0b01 	adc.w	fp, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d70:	4692      	mov	sl, r2
 8002d72:	469b      	mov	fp, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb4b 0303 	adc.w	r3, fp, r3
 8002d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	18db      	adds	r3, r3, r3
 8002da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002db2:	f7fd fa0f 	bl	80001d4 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2264      	movs	r2, #100	@ 0x64
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	1acb      	subs	r3, r1, r3
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dd2:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002de0:	441c      	add	r4, r3
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e04:	4641      	mov	r1, r8
 8002e06:	1851      	adds	r1, r2, r1
 8002e08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	414b      	adcs	r3, r1
 8002e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	00cb      	lsls	r3, r1, #3
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e26:	4651      	mov	r1, sl
 8002e28:	00ca      	lsls	r2, r1, #3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4642      	mov	r2, r8
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e6e:	f7fd f9b1 	bl	80001d4 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	@ 0x32
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4422      	add	r2, r4
 8002e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea0:	e106      	b.n	80030b0 <UART_SetConfig+0x4d8>
 8002ea2:	bf00      	nop
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	1891      	adds	r1, r2, r2
 8002ec8:	6239      	str	r1, [r7, #32]
 8002eca:	415b      	adcs	r3, r3
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	1854      	adds	r4, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb43 0501 	adc.w	r5, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	00eb      	lsls	r3, r5, #3
 8002ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eea:	00e2      	lsls	r2, r4, #3
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ef8:	464b      	mov	r3, r9
 8002efa:	eb45 0303 	adc.w	r3, r5, r3
 8002efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f1e:	4629      	mov	r1, r5
 8002f20:	008b      	lsls	r3, r1, #2
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f28:	4621      	mov	r1, r4
 8002f2a:	008a      	lsls	r2, r1, #2
 8002f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f30:	f7fd f950 	bl	80001d4 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4b60      	ldr	r3, [pc, #384]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011c      	lsls	r4, r3, #4
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	61b9      	str	r1, [r7, #24]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	4641      	mov	r1, r8
 8002f66:	1851      	adds	r1, r2, r1
 8002f68:	6139      	str	r1, [r7, #16]
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	414b      	adcs	r3, r1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	00cb      	lsls	r3, r1, #3
 8002f80:	4651      	mov	r1, sl
 8002f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f86:	4651      	mov	r1, sl
 8002f88:	00ca      	lsls	r2, r1, #3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4642      	mov	r2, r8
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f98:	464b      	mov	r3, r9
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	eb42 0303 	adc.w	r3, r2, r3
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	008b      	lsls	r3, r1, #2
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	008a      	lsls	r2, r1, #2
 8002fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fce:	f7fd f901 	bl	80001d4 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4b38      	ldr	r3, [pc, #224]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002fda:	fba3 2301 	umull	r2, r3, r3, r1
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2264      	movs	r2, #100	@ 0x64
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	1acb      	subs	r3, r1, r3
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	3332      	adds	r3, #50	@ 0x32
 8002fec:	4a33      	ldr	r2, [pc, #204]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff8:	441c      	add	r4, r3
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	673b      	str	r3, [r7, #112]	@ 0x70
 8003002:	677a      	str	r2, [r7, #116]	@ 0x74
 8003004:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	415b      	adcs	r3, r3
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304a:	464b      	mov	r3, r9
 800304c:	460a      	mov	r2, r1
 800304e:	eb42 0303 	adc.w	r3, r2, r3
 8003052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	663b      	str	r3, [r7, #96]	@ 0x60
 800305e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800306c:	4649      	mov	r1, r9
 800306e:	008b      	lsls	r3, r1, #2
 8003070:	4641      	mov	r1, r8
 8003072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003076:	4641      	mov	r1, r8
 8003078:	008a      	lsls	r2, r1, #2
 800307a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800307e:	f7fd f8a9 	bl	80001d4 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <UART_SetConfig+0x4e4>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	@ 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	3332      	adds	r3, #50	@ 0x32
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <UART_SetConfig+0x4e4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4422      	add	r2, r4
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030b6:	46bd      	mov	sp, r7
 80030b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030bc:	51eb851f 	.word	0x51eb851f

080030c0 <std>:
 80030c0:	2300      	movs	r3, #0
 80030c2:	b510      	push	{r4, lr}
 80030c4:	4604      	mov	r4, r0
 80030c6:	e9c0 3300 	strd	r3, r3, [r0]
 80030ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ce:	6083      	str	r3, [r0, #8]
 80030d0:	8181      	strh	r1, [r0, #12]
 80030d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80030d4:	81c2      	strh	r2, [r0, #14]
 80030d6:	6183      	str	r3, [r0, #24]
 80030d8:	4619      	mov	r1, r3
 80030da:	2208      	movs	r2, #8
 80030dc:	305c      	adds	r0, #92	@ 0x5c
 80030de:	f000 f9e7 	bl	80034b0 <memset>
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <std+0x58>)
 80030e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <std+0x5c>)
 80030e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <std+0x60>)
 80030ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <std+0x64>)
 80030f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <std+0x68>)
 80030f4:	6224      	str	r4, [r4, #32]
 80030f6:	429c      	cmp	r4, r3
 80030f8:	d006      	beq.n	8003108 <std+0x48>
 80030fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030fe:	4294      	cmp	r4, r2
 8003100:	d002      	beq.n	8003108 <std+0x48>
 8003102:	33d0      	adds	r3, #208	@ 0xd0
 8003104:	429c      	cmp	r4, r3
 8003106:	d105      	bne.n	8003114 <std+0x54>
 8003108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800310c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003110:	f000 ba46 	b.w	80035a0 <__retarget_lock_init_recursive>
 8003114:	bd10      	pop	{r4, pc}
 8003116:	bf00      	nop
 8003118:	08003301 	.word	0x08003301
 800311c:	08003323 	.word	0x08003323
 8003120:	0800335b 	.word	0x0800335b
 8003124:	0800337f 	.word	0x0800337f
 8003128:	200000f4 	.word	0x200000f4

0800312c <stdio_exit_handler>:
 800312c:	4a02      	ldr	r2, [pc, #8]	@ (8003138 <stdio_exit_handler+0xc>)
 800312e:	4903      	ldr	r1, [pc, #12]	@ (800313c <stdio_exit_handler+0x10>)
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <stdio_exit_handler+0x14>)
 8003132:	f000 b869 	b.w	8003208 <_fwalk_sglue>
 8003136:	bf00      	nop
 8003138:	2000000c 	.word	0x2000000c
 800313c:	080038a1 	.word	0x080038a1
 8003140:	2000001c 	.word	0x2000001c

08003144 <cleanup_stdio>:
 8003144:	6841      	ldr	r1, [r0, #4]
 8003146:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <cleanup_stdio+0x34>)
 8003148:	4299      	cmp	r1, r3
 800314a:	b510      	push	{r4, lr}
 800314c:	4604      	mov	r4, r0
 800314e:	d001      	beq.n	8003154 <cleanup_stdio+0x10>
 8003150:	f000 fba6 	bl	80038a0 <_fflush_r>
 8003154:	68a1      	ldr	r1, [r4, #8]
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <cleanup_stdio+0x38>)
 8003158:	4299      	cmp	r1, r3
 800315a:	d002      	beq.n	8003162 <cleanup_stdio+0x1e>
 800315c:	4620      	mov	r0, r4
 800315e:	f000 fb9f 	bl	80038a0 <_fflush_r>
 8003162:	68e1      	ldr	r1, [r4, #12]
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <cleanup_stdio+0x3c>)
 8003166:	4299      	cmp	r1, r3
 8003168:	d004      	beq.n	8003174 <cleanup_stdio+0x30>
 800316a:	4620      	mov	r0, r4
 800316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003170:	f000 bb96 	b.w	80038a0 <_fflush_r>
 8003174:	bd10      	pop	{r4, pc}
 8003176:	bf00      	nop
 8003178:	200000f4 	.word	0x200000f4
 800317c:	2000015c 	.word	0x2000015c
 8003180:	200001c4 	.word	0x200001c4

08003184 <global_stdio_init.part.0>:
 8003184:	b510      	push	{r4, lr}
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <global_stdio_init.part.0+0x30>)
 8003188:	4c0b      	ldr	r4, [pc, #44]	@ (80031b8 <global_stdio_init.part.0+0x34>)
 800318a:	4a0c      	ldr	r2, [pc, #48]	@ (80031bc <global_stdio_init.part.0+0x38>)
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4620      	mov	r0, r4
 8003190:	2200      	movs	r2, #0
 8003192:	2104      	movs	r1, #4
 8003194:	f7ff ff94 	bl	80030c0 <std>
 8003198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800319c:	2201      	movs	r2, #1
 800319e:	2109      	movs	r1, #9
 80031a0:	f7ff ff8e 	bl	80030c0 <std>
 80031a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031a8:	2202      	movs	r2, #2
 80031aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ae:	2112      	movs	r1, #18
 80031b0:	f7ff bf86 	b.w	80030c0 <std>
 80031b4:	2000022c 	.word	0x2000022c
 80031b8:	200000f4 	.word	0x200000f4
 80031bc:	0800312d 	.word	0x0800312d

080031c0 <__sfp_lock_acquire>:
 80031c0:	4801      	ldr	r0, [pc, #4]	@ (80031c8 <__sfp_lock_acquire+0x8>)
 80031c2:	f000 b9ee 	b.w	80035a2 <__retarget_lock_acquire_recursive>
 80031c6:	bf00      	nop
 80031c8:	20000235 	.word	0x20000235

080031cc <__sfp_lock_release>:
 80031cc:	4801      	ldr	r0, [pc, #4]	@ (80031d4 <__sfp_lock_release+0x8>)
 80031ce:	f000 b9e9 	b.w	80035a4 <__retarget_lock_release_recursive>
 80031d2:	bf00      	nop
 80031d4:	20000235 	.word	0x20000235

080031d8 <__sinit>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
 80031dc:	f7ff fff0 	bl	80031c0 <__sfp_lock_acquire>
 80031e0:	6a23      	ldr	r3, [r4, #32]
 80031e2:	b11b      	cbz	r3, 80031ec <__sinit+0x14>
 80031e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e8:	f7ff bff0 	b.w	80031cc <__sfp_lock_release>
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <__sinit+0x28>)
 80031ee:	6223      	str	r3, [r4, #32]
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__sinit+0x2c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f5      	bne.n	80031e4 <__sinit+0xc>
 80031f8:	f7ff ffc4 	bl	8003184 <global_stdio_init.part.0>
 80031fc:	e7f2      	b.n	80031e4 <__sinit+0xc>
 80031fe:	bf00      	nop
 8003200:	08003145 	.word	0x08003145
 8003204:	2000022c 	.word	0x2000022c

08003208 <_fwalk_sglue>:
 8003208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800320c:	4607      	mov	r7, r0
 800320e:	4688      	mov	r8, r1
 8003210:	4614      	mov	r4, r2
 8003212:	2600      	movs	r6, #0
 8003214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003218:	f1b9 0901 	subs.w	r9, r9, #1
 800321c:	d505      	bpl.n	800322a <_fwalk_sglue+0x22>
 800321e:	6824      	ldr	r4, [r4, #0]
 8003220:	2c00      	cmp	r4, #0
 8003222:	d1f7      	bne.n	8003214 <_fwalk_sglue+0xc>
 8003224:	4630      	mov	r0, r6
 8003226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322a:	89ab      	ldrh	r3, [r5, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d907      	bls.n	8003240 <_fwalk_sglue+0x38>
 8003230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003234:	3301      	adds	r3, #1
 8003236:	d003      	beq.n	8003240 <_fwalk_sglue+0x38>
 8003238:	4629      	mov	r1, r5
 800323a:	4638      	mov	r0, r7
 800323c:	47c0      	blx	r8
 800323e:	4306      	orrs	r6, r0
 8003240:	3568      	adds	r5, #104	@ 0x68
 8003242:	e7e9      	b.n	8003218 <_fwalk_sglue+0x10>

08003244 <_puts_r>:
 8003244:	6a03      	ldr	r3, [r0, #32]
 8003246:	b570      	push	{r4, r5, r6, lr}
 8003248:	6884      	ldr	r4, [r0, #8]
 800324a:	4605      	mov	r5, r0
 800324c:	460e      	mov	r6, r1
 800324e:	b90b      	cbnz	r3, 8003254 <_puts_r+0x10>
 8003250:	f7ff ffc2 	bl	80031d8 <__sinit>
 8003254:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003256:	07db      	lsls	r3, r3, #31
 8003258:	d405      	bmi.n	8003266 <_puts_r+0x22>
 800325a:	89a3      	ldrh	r3, [r4, #12]
 800325c:	0598      	lsls	r0, r3, #22
 800325e:	d402      	bmi.n	8003266 <_puts_r+0x22>
 8003260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003262:	f000 f99e 	bl	80035a2 <__retarget_lock_acquire_recursive>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	0719      	lsls	r1, r3, #28
 800326a:	d502      	bpl.n	8003272 <_puts_r+0x2e>
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d135      	bne.n	80032de <_puts_r+0x9a>
 8003272:	4621      	mov	r1, r4
 8003274:	4628      	mov	r0, r5
 8003276:	f000 f8c5 	bl	8003404 <__swsetup_r>
 800327a:	b380      	cbz	r0, 80032de <_puts_r+0x9a>
 800327c:	f04f 35ff 	mov.w	r5, #4294967295
 8003280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003282:	07da      	lsls	r2, r3, #31
 8003284:	d405      	bmi.n	8003292 <_puts_r+0x4e>
 8003286:	89a3      	ldrh	r3, [r4, #12]
 8003288:	059b      	lsls	r3, r3, #22
 800328a:	d402      	bmi.n	8003292 <_puts_r+0x4e>
 800328c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800328e:	f000 f989 	bl	80035a4 <__retarget_lock_release_recursive>
 8003292:	4628      	mov	r0, r5
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	2b00      	cmp	r3, #0
 8003298:	da04      	bge.n	80032a4 <_puts_r+0x60>
 800329a:	69a2      	ldr	r2, [r4, #24]
 800329c:	429a      	cmp	r2, r3
 800329e:	dc17      	bgt.n	80032d0 <_puts_r+0x8c>
 80032a0:	290a      	cmp	r1, #10
 80032a2:	d015      	beq.n	80032d0 <_puts_r+0x8c>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	6022      	str	r2, [r4, #0]
 80032aa:	7019      	strb	r1, [r3, #0]
 80032ac:	68a3      	ldr	r3, [r4, #8]
 80032ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032b2:	3b01      	subs	r3, #1
 80032b4:	60a3      	str	r3, [r4, #8]
 80032b6:	2900      	cmp	r1, #0
 80032b8:	d1ed      	bne.n	8003296 <_puts_r+0x52>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da11      	bge.n	80032e2 <_puts_r+0x9e>
 80032be:	4622      	mov	r2, r4
 80032c0:	210a      	movs	r1, #10
 80032c2:	4628      	mov	r0, r5
 80032c4:	f000 f85f 	bl	8003386 <__swbuf_r>
 80032c8:	3001      	adds	r0, #1
 80032ca:	d0d7      	beq.n	800327c <_puts_r+0x38>
 80032cc:	250a      	movs	r5, #10
 80032ce:	e7d7      	b.n	8003280 <_puts_r+0x3c>
 80032d0:	4622      	mov	r2, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 f857 	bl	8003386 <__swbuf_r>
 80032d8:	3001      	adds	r0, #1
 80032da:	d1e7      	bne.n	80032ac <_puts_r+0x68>
 80032dc:	e7ce      	b.n	800327c <_puts_r+0x38>
 80032de:	3e01      	subs	r6, #1
 80032e0:	e7e4      	b.n	80032ac <_puts_r+0x68>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	6022      	str	r2, [r4, #0]
 80032e8:	220a      	movs	r2, #10
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e7ee      	b.n	80032cc <_puts_r+0x88>
	...

080032f0 <puts>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	@ (80032fc <puts+0xc>)
 80032f2:	4601      	mov	r1, r0
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	f7ff bfa5 	b.w	8003244 <_puts_r>
 80032fa:	bf00      	nop
 80032fc:	20000018 	.word	0x20000018

08003300 <__sread>:
 8003300:	b510      	push	{r4, lr}
 8003302:	460c      	mov	r4, r1
 8003304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003308:	f000 f8fc 	bl	8003504 <_read_r>
 800330c:	2800      	cmp	r0, #0
 800330e:	bfab      	itete	ge
 8003310:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003312:	89a3      	ldrhlt	r3, [r4, #12]
 8003314:	181b      	addge	r3, r3, r0
 8003316:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800331a:	bfac      	ite	ge
 800331c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800331e:	81a3      	strhlt	r3, [r4, #12]
 8003320:	bd10      	pop	{r4, pc}

08003322 <__swrite>:
 8003322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003326:	461f      	mov	r7, r3
 8003328:	898b      	ldrh	r3, [r1, #12]
 800332a:	05db      	lsls	r3, r3, #23
 800332c:	4605      	mov	r5, r0
 800332e:	460c      	mov	r4, r1
 8003330:	4616      	mov	r6, r2
 8003332:	d505      	bpl.n	8003340 <__swrite+0x1e>
 8003334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003338:	2302      	movs	r3, #2
 800333a:	2200      	movs	r2, #0
 800333c:	f000 f8d0 	bl	80034e0 <_lseek_r>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003346:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	4632      	mov	r2, r6
 800334e:	463b      	mov	r3, r7
 8003350:	4628      	mov	r0, r5
 8003352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003356:	f000 b8e7 	b.w	8003528 <_write_r>

0800335a <__sseek>:
 800335a:	b510      	push	{r4, lr}
 800335c:	460c      	mov	r4, r1
 800335e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003362:	f000 f8bd 	bl	80034e0 <_lseek_r>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	bf15      	itete	ne
 800336c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800336e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003372:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003376:	81a3      	strheq	r3, [r4, #12]
 8003378:	bf18      	it	ne
 800337a:	81a3      	strhne	r3, [r4, #12]
 800337c:	bd10      	pop	{r4, pc}

0800337e <__sclose>:
 800337e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003382:	f000 b89d 	b.w	80034c0 <_close_r>

08003386 <__swbuf_r>:
 8003386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003388:	460e      	mov	r6, r1
 800338a:	4614      	mov	r4, r2
 800338c:	4605      	mov	r5, r0
 800338e:	b118      	cbz	r0, 8003398 <__swbuf_r+0x12>
 8003390:	6a03      	ldr	r3, [r0, #32]
 8003392:	b90b      	cbnz	r3, 8003398 <__swbuf_r+0x12>
 8003394:	f7ff ff20 	bl	80031d8 <__sinit>
 8003398:	69a3      	ldr	r3, [r4, #24]
 800339a:	60a3      	str	r3, [r4, #8]
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	071a      	lsls	r2, r3, #28
 80033a0:	d501      	bpl.n	80033a6 <__swbuf_r+0x20>
 80033a2:	6923      	ldr	r3, [r4, #16]
 80033a4:	b943      	cbnz	r3, 80033b8 <__swbuf_r+0x32>
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 f82b 	bl	8003404 <__swsetup_r>
 80033ae:	b118      	cbz	r0, 80033b8 <__swbuf_r+0x32>
 80033b0:	f04f 37ff 	mov.w	r7, #4294967295
 80033b4:	4638      	mov	r0, r7
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	6922      	ldr	r2, [r4, #16]
 80033bc:	1a98      	subs	r0, r3, r2
 80033be:	6963      	ldr	r3, [r4, #20]
 80033c0:	b2f6      	uxtb	r6, r6
 80033c2:	4283      	cmp	r3, r0
 80033c4:	4637      	mov	r7, r6
 80033c6:	dc05      	bgt.n	80033d4 <__swbuf_r+0x4e>
 80033c8:	4621      	mov	r1, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	f000 fa68 	bl	80038a0 <_fflush_r>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d1ed      	bne.n	80033b0 <__swbuf_r+0x2a>
 80033d4:	68a3      	ldr	r3, [r4, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60a3      	str	r3, [r4, #8]
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	6022      	str	r2, [r4, #0]
 80033e0:	701e      	strb	r6, [r3, #0]
 80033e2:	6962      	ldr	r2, [r4, #20]
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d004      	beq.n	80033f4 <__swbuf_r+0x6e>
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	07db      	lsls	r3, r3, #31
 80033ee:	d5e1      	bpl.n	80033b4 <__swbuf_r+0x2e>
 80033f0:	2e0a      	cmp	r6, #10
 80033f2:	d1df      	bne.n	80033b4 <__swbuf_r+0x2e>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	f000 fa52 	bl	80038a0 <_fflush_r>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d0d9      	beq.n	80033b4 <__swbuf_r+0x2e>
 8003400:	e7d6      	b.n	80033b0 <__swbuf_r+0x2a>
	...

08003404 <__swsetup_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4b29      	ldr	r3, [pc, #164]	@ (80034ac <__swsetup_r+0xa8>)
 8003408:	4605      	mov	r5, r0
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	460c      	mov	r4, r1
 800340e:	b118      	cbz	r0, 8003418 <__swsetup_r+0x14>
 8003410:	6a03      	ldr	r3, [r0, #32]
 8003412:	b90b      	cbnz	r3, 8003418 <__swsetup_r+0x14>
 8003414:	f7ff fee0 	bl	80031d8 <__sinit>
 8003418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800341c:	0719      	lsls	r1, r3, #28
 800341e:	d422      	bmi.n	8003466 <__swsetup_r+0x62>
 8003420:	06da      	lsls	r2, r3, #27
 8003422:	d407      	bmi.n	8003434 <__swsetup_r+0x30>
 8003424:	2209      	movs	r2, #9
 8003426:	602a      	str	r2, [r5, #0]
 8003428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800342c:	81a3      	strh	r3, [r4, #12]
 800342e:	f04f 30ff 	mov.w	r0, #4294967295
 8003432:	e033      	b.n	800349c <__swsetup_r+0x98>
 8003434:	0758      	lsls	r0, r3, #29
 8003436:	d512      	bpl.n	800345e <__swsetup_r+0x5a>
 8003438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800343a:	b141      	cbz	r1, 800344e <__swsetup_r+0x4a>
 800343c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003440:	4299      	cmp	r1, r3
 8003442:	d002      	beq.n	800344a <__swsetup_r+0x46>
 8003444:	4628      	mov	r0, r5
 8003446:	f000 f8af 	bl	80035a8 <_free_r>
 800344a:	2300      	movs	r3, #0
 800344c:	6363      	str	r3, [r4, #52]	@ 0x34
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	2300      	movs	r3, #0
 8003458:	6063      	str	r3, [r4, #4]
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	89a3      	ldrh	r3, [r4, #12]
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	81a3      	strh	r3, [r4, #12]
 8003466:	6923      	ldr	r3, [r4, #16]
 8003468:	b94b      	cbnz	r3, 800347e <__swsetup_r+0x7a>
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003474:	d003      	beq.n	800347e <__swsetup_r+0x7a>
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	f000 fa5f 	bl	800393c <__smakebuf_r>
 800347e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003482:	f013 0201 	ands.w	r2, r3, #1
 8003486:	d00a      	beq.n	800349e <__swsetup_r+0x9a>
 8003488:	2200      	movs	r2, #0
 800348a:	60a2      	str	r2, [r4, #8]
 800348c:	6962      	ldr	r2, [r4, #20]
 800348e:	4252      	negs	r2, r2
 8003490:	61a2      	str	r2, [r4, #24]
 8003492:	6922      	ldr	r2, [r4, #16]
 8003494:	b942      	cbnz	r2, 80034a8 <__swsetup_r+0xa4>
 8003496:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800349a:	d1c5      	bne.n	8003428 <__swsetup_r+0x24>
 800349c:	bd38      	pop	{r3, r4, r5, pc}
 800349e:	0799      	lsls	r1, r3, #30
 80034a0:	bf58      	it	pl
 80034a2:	6962      	ldrpl	r2, [r4, #20]
 80034a4:	60a2      	str	r2, [r4, #8]
 80034a6:	e7f4      	b.n	8003492 <__swsetup_r+0x8e>
 80034a8:	2000      	movs	r0, #0
 80034aa:	e7f7      	b.n	800349c <__swsetup_r+0x98>
 80034ac:	20000018 	.word	0x20000018

080034b0 <memset>:
 80034b0:	4402      	add	r2, r0
 80034b2:	4603      	mov	r3, r0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <_close_r>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	4d06      	ldr	r5, [pc, #24]	@ (80034dc <_close_r+0x1c>)
 80034c4:	2300      	movs	r3, #0
 80034c6:	4604      	mov	r4, r0
 80034c8:	4608      	mov	r0, r1
 80034ca:	602b      	str	r3, [r5, #0]
 80034cc:	f7fd fa83 	bl	80009d6 <_close>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d102      	bne.n	80034da <_close_r+0x1a>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	b103      	cbz	r3, 80034da <_close_r+0x1a>
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	20000230 	.word	0x20000230

080034e0 <_lseek_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4d07      	ldr	r5, [pc, #28]	@ (8003500 <_lseek_r+0x20>)
 80034e4:	4604      	mov	r4, r0
 80034e6:	4608      	mov	r0, r1
 80034e8:	4611      	mov	r1, r2
 80034ea:	2200      	movs	r2, #0
 80034ec:	602a      	str	r2, [r5, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f7fd fa98 	bl	8000a24 <_lseek>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_lseek_r+0x1e>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_lseek_r+0x1e>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	20000230 	.word	0x20000230

08003504 <_read_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4d07      	ldr	r5, [pc, #28]	@ (8003524 <_read_r+0x20>)
 8003508:	4604      	mov	r4, r0
 800350a:	4608      	mov	r0, r1
 800350c:	4611      	mov	r1, r2
 800350e:	2200      	movs	r2, #0
 8003510:	602a      	str	r2, [r5, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	f7fd fa26 	bl	8000964 <_read>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d102      	bne.n	8003522 <_read_r+0x1e>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b103      	cbz	r3, 8003522 <_read_r+0x1e>
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	20000230 	.word	0x20000230

08003528 <_write_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d07      	ldr	r5, [pc, #28]	@ (8003548 <_write_r+0x20>)
 800352c:	4604      	mov	r4, r0
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	2200      	movs	r2, #0
 8003534:	602a      	str	r2, [r5, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f7fd fa31 	bl	800099e <_write>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_write_r+0x1e>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b103      	cbz	r3, 8003546 <_write_r+0x1e>
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	20000230 	.word	0x20000230

0800354c <__errno>:
 800354c:	4b01      	ldr	r3, [pc, #4]	@ (8003554 <__errno+0x8>)
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000018 	.word	0x20000018

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	4d0d      	ldr	r5, [pc, #52]	@ (8003590 <__libc_init_array+0x38>)
 800355c:	4c0d      	ldr	r4, [pc, #52]	@ (8003594 <__libc_init_array+0x3c>)
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	10a4      	asrs	r4, r4, #2
 8003562:	2600      	movs	r6, #0
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	4d0b      	ldr	r5, [pc, #44]	@ (8003598 <__libc_init_array+0x40>)
 800356a:	4c0c      	ldr	r4, [pc, #48]	@ (800359c <__libc_init_array+0x44>)
 800356c:	f000 fa54 	bl	8003a18 <_init>
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	2600      	movs	r6, #0
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	f855 3b04 	ldr.w	r3, [r5], #4
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	08003a60 	.word	0x08003a60
 8003594:	08003a60 	.word	0x08003a60
 8003598:	08003a60 	.word	0x08003a60
 800359c:	08003a64 	.word	0x08003a64

080035a0 <__retarget_lock_init_recursive>:
 80035a0:	4770      	bx	lr

080035a2 <__retarget_lock_acquire_recursive>:
 80035a2:	4770      	bx	lr

080035a4 <__retarget_lock_release_recursive>:
 80035a4:	4770      	bx	lr
	...

080035a8 <_free_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	4605      	mov	r5, r0
 80035ac:	2900      	cmp	r1, #0
 80035ae:	d041      	beq.n	8003634 <_free_r+0x8c>
 80035b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035b4:	1f0c      	subs	r4, r1, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bfb8      	it	lt
 80035ba:	18e4      	addlt	r4, r4, r3
 80035bc:	f000 f8e0 	bl	8003780 <__malloc_lock>
 80035c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <_free_r+0x90>)
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	b933      	cbnz	r3, 80035d4 <_free_r+0x2c>
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	6014      	str	r4, [r2, #0]
 80035ca:	4628      	mov	r0, r5
 80035cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035d0:	f000 b8dc 	b.w	800378c <__malloc_unlock>
 80035d4:	42a3      	cmp	r3, r4
 80035d6:	d908      	bls.n	80035ea <_free_r+0x42>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428b      	cmp	r3, r1
 80035de:	bf01      	itttt	eq
 80035e0:	6819      	ldreq	r1, [r3, #0]
 80035e2:	685b      	ldreq	r3, [r3, #4]
 80035e4:	1809      	addeq	r1, r1, r0
 80035e6:	6021      	streq	r1, [r4, #0]
 80035e8:	e7ed      	b.n	80035c6 <_free_r+0x1e>
 80035ea:	461a      	mov	r2, r3
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b10b      	cbz	r3, 80035f4 <_free_r+0x4c>
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	d9fa      	bls.n	80035ea <_free_r+0x42>
 80035f4:	6811      	ldr	r1, [r2, #0]
 80035f6:	1850      	adds	r0, r2, r1
 80035f8:	42a0      	cmp	r0, r4
 80035fa:	d10b      	bne.n	8003614 <_free_r+0x6c>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	4401      	add	r1, r0
 8003600:	1850      	adds	r0, r2, r1
 8003602:	4283      	cmp	r3, r0
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	d1e0      	bne.n	80035ca <_free_r+0x22>
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6053      	str	r3, [r2, #4]
 800360e:	4408      	add	r0, r1
 8003610:	6010      	str	r0, [r2, #0]
 8003612:	e7da      	b.n	80035ca <_free_r+0x22>
 8003614:	d902      	bls.n	800361c <_free_r+0x74>
 8003616:	230c      	movs	r3, #12
 8003618:	602b      	str	r3, [r5, #0]
 800361a:	e7d6      	b.n	80035ca <_free_r+0x22>
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	1821      	adds	r1, r4, r0
 8003620:	428b      	cmp	r3, r1
 8003622:	bf04      	itt	eq
 8003624:	6819      	ldreq	r1, [r3, #0]
 8003626:	685b      	ldreq	r3, [r3, #4]
 8003628:	6063      	str	r3, [r4, #4]
 800362a:	bf04      	itt	eq
 800362c:	1809      	addeq	r1, r1, r0
 800362e:	6021      	streq	r1, [r4, #0]
 8003630:	6054      	str	r4, [r2, #4]
 8003632:	e7ca      	b.n	80035ca <_free_r+0x22>
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	2000023c 	.word	0x2000023c

0800363c <sbrk_aligned>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	4e0f      	ldr	r6, [pc, #60]	@ (800367c <sbrk_aligned+0x40>)
 8003640:	460c      	mov	r4, r1
 8003642:	6831      	ldr	r1, [r6, #0]
 8003644:	4605      	mov	r5, r0
 8003646:	b911      	cbnz	r1, 800364e <sbrk_aligned+0x12>
 8003648:	f000 f9d6 	bl	80039f8 <_sbrk_r>
 800364c:	6030      	str	r0, [r6, #0]
 800364e:	4621      	mov	r1, r4
 8003650:	4628      	mov	r0, r5
 8003652:	f000 f9d1 	bl	80039f8 <_sbrk_r>
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	d103      	bne.n	8003662 <sbrk_aligned+0x26>
 800365a:	f04f 34ff 	mov.w	r4, #4294967295
 800365e:	4620      	mov	r0, r4
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	1cc4      	adds	r4, r0, #3
 8003664:	f024 0403 	bic.w	r4, r4, #3
 8003668:	42a0      	cmp	r0, r4
 800366a:	d0f8      	beq.n	800365e <sbrk_aligned+0x22>
 800366c:	1a21      	subs	r1, r4, r0
 800366e:	4628      	mov	r0, r5
 8003670:	f000 f9c2 	bl	80039f8 <_sbrk_r>
 8003674:	3001      	adds	r0, #1
 8003676:	d1f2      	bne.n	800365e <sbrk_aligned+0x22>
 8003678:	e7ef      	b.n	800365a <sbrk_aligned+0x1e>
 800367a:	bf00      	nop
 800367c:	20000238 	.word	0x20000238

08003680 <_malloc_r>:
 8003680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003684:	1ccd      	adds	r5, r1, #3
 8003686:	f025 0503 	bic.w	r5, r5, #3
 800368a:	3508      	adds	r5, #8
 800368c:	2d0c      	cmp	r5, #12
 800368e:	bf38      	it	cc
 8003690:	250c      	movcc	r5, #12
 8003692:	2d00      	cmp	r5, #0
 8003694:	4606      	mov	r6, r0
 8003696:	db01      	blt.n	800369c <_malloc_r+0x1c>
 8003698:	42a9      	cmp	r1, r5
 800369a:	d904      	bls.n	80036a6 <_malloc_r+0x26>
 800369c:	230c      	movs	r3, #12
 800369e:	6033      	str	r3, [r6, #0]
 80036a0:	2000      	movs	r0, #0
 80036a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800377c <_malloc_r+0xfc>
 80036aa:	f000 f869 	bl	8003780 <__malloc_lock>
 80036ae:	f8d8 3000 	ldr.w	r3, [r8]
 80036b2:	461c      	mov	r4, r3
 80036b4:	bb44      	cbnz	r4, 8003708 <_malloc_r+0x88>
 80036b6:	4629      	mov	r1, r5
 80036b8:	4630      	mov	r0, r6
 80036ba:	f7ff ffbf 	bl	800363c <sbrk_aligned>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	4604      	mov	r4, r0
 80036c2:	d158      	bne.n	8003776 <_malloc_r+0xf6>
 80036c4:	f8d8 4000 	ldr.w	r4, [r8]
 80036c8:	4627      	mov	r7, r4
 80036ca:	2f00      	cmp	r7, #0
 80036cc:	d143      	bne.n	8003756 <_malloc_r+0xd6>
 80036ce:	2c00      	cmp	r4, #0
 80036d0:	d04b      	beq.n	800376a <_malloc_r+0xea>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	4639      	mov	r1, r7
 80036d6:	4630      	mov	r0, r6
 80036d8:	eb04 0903 	add.w	r9, r4, r3
 80036dc:	f000 f98c 	bl	80039f8 <_sbrk_r>
 80036e0:	4581      	cmp	r9, r0
 80036e2:	d142      	bne.n	800376a <_malloc_r+0xea>
 80036e4:	6821      	ldr	r1, [r4, #0]
 80036e6:	1a6d      	subs	r5, r5, r1
 80036e8:	4629      	mov	r1, r5
 80036ea:	4630      	mov	r0, r6
 80036ec:	f7ff ffa6 	bl	800363c <sbrk_aligned>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d03a      	beq.n	800376a <_malloc_r+0xea>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	442b      	add	r3, r5
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	f8d8 3000 	ldr.w	r3, [r8]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	bb62      	cbnz	r2, 800375c <_malloc_r+0xdc>
 8003702:	f8c8 7000 	str.w	r7, [r8]
 8003706:	e00f      	b.n	8003728 <_malloc_r+0xa8>
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	1b52      	subs	r2, r2, r5
 800370c:	d420      	bmi.n	8003750 <_malloc_r+0xd0>
 800370e:	2a0b      	cmp	r2, #11
 8003710:	d917      	bls.n	8003742 <_malloc_r+0xc2>
 8003712:	1961      	adds	r1, r4, r5
 8003714:	42a3      	cmp	r3, r4
 8003716:	6025      	str	r5, [r4, #0]
 8003718:	bf18      	it	ne
 800371a:	6059      	strne	r1, [r3, #4]
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	bf08      	it	eq
 8003720:	f8c8 1000 	streq.w	r1, [r8]
 8003724:	5162      	str	r2, [r4, r5]
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	4630      	mov	r0, r6
 800372a:	f000 f82f 	bl	800378c <__malloc_unlock>
 800372e:	f104 000b 	add.w	r0, r4, #11
 8003732:	1d23      	adds	r3, r4, #4
 8003734:	f020 0007 	bic.w	r0, r0, #7
 8003738:	1ac2      	subs	r2, r0, r3
 800373a:	bf1c      	itt	ne
 800373c:	1a1b      	subne	r3, r3, r0
 800373e:	50a3      	strne	r3, [r4, r2]
 8003740:	e7af      	b.n	80036a2 <_malloc_r+0x22>
 8003742:	6862      	ldr	r2, [r4, #4]
 8003744:	42a3      	cmp	r3, r4
 8003746:	bf0c      	ite	eq
 8003748:	f8c8 2000 	streq.w	r2, [r8]
 800374c:	605a      	strne	r2, [r3, #4]
 800374e:	e7eb      	b.n	8003728 <_malloc_r+0xa8>
 8003750:	4623      	mov	r3, r4
 8003752:	6864      	ldr	r4, [r4, #4]
 8003754:	e7ae      	b.n	80036b4 <_malloc_r+0x34>
 8003756:	463c      	mov	r4, r7
 8003758:	687f      	ldr	r7, [r7, #4]
 800375a:	e7b6      	b.n	80036ca <_malloc_r+0x4a>
 800375c:	461a      	mov	r2, r3
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	42a3      	cmp	r3, r4
 8003762:	d1fb      	bne.n	800375c <_malloc_r+0xdc>
 8003764:	2300      	movs	r3, #0
 8003766:	6053      	str	r3, [r2, #4]
 8003768:	e7de      	b.n	8003728 <_malloc_r+0xa8>
 800376a:	230c      	movs	r3, #12
 800376c:	6033      	str	r3, [r6, #0]
 800376e:	4630      	mov	r0, r6
 8003770:	f000 f80c 	bl	800378c <__malloc_unlock>
 8003774:	e794      	b.n	80036a0 <_malloc_r+0x20>
 8003776:	6005      	str	r5, [r0, #0]
 8003778:	e7d6      	b.n	8003728 <_malloc_r+0xa8>
 800377a:	bf00      	nop
 800377c:	2000023c 	.word	0x2000023c

08003780 <__malloc_lock>:
 8003780:	4801      	ldr	r0, [pc, #4]	@ (8003788 <__malloc_lock+0x8>)
 8003782:	f7ff bf0e 	b.w	80035a2 <__retarget_lock_acquire_recursive>
 8003786:	bf00      	nop
 8003788:	20000234 	.word	0x20000234

0800378c <__malloc_unlock>:
 800378c:	4801      	ldr	r0, [pc, #4]	@ (8003794 <__malloc_unlock+0x8>)
 800378e:	f7ff bf09 	b.w	80035a4 <__retarget_lock_release_recursive>
 8003792:	bf00      	nop
 8003794:	20000234 	.word	0x20000234

08003798 <__sflush_r>:
 8003798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a0:	0716      	lsls	r6, r2, #28
 80037a2:	4605      	mov	r5, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	d454      	bmi.n	8003852 <__sflush_r+0xba>
 80037a8:	684b      	ldr	r3, [r1, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dc02      	bgt.n	80037b4 <__sflush_r+0x1c>
 80037ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	dd48      	ble.n	8003846 <__sflush_r+0xae>
 80037b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	d045      	beq.n	8003846 <__sflush_r+0xae>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037c0:	682f      	ldr	r7, [r5, #0]
 80037c2:	6a21      	ldr	r1, [r4, #32]
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	d030      	beq.n	800382a <__sflush_r+0x92>
 80037c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	0759      	lsls	r1, r3, #29
 80037ce:	d505      	bpl.n	80037dc <__sflush_r+0x44>
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	1ad2      	subs	r2, r2, r3
 80037d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037d6:	b10b      	cbz	r3, 80037dc <__sflush_r+0x44>
 80037d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	2300      	movs	r3, #0
 80037de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037e0:	6a21      	ldr	r1, [r4, #32]
 80037e2:	4628      	mov	r0, r5
 80037e4:	47b0      	blx	r6
 80037e6:	1c43      	adds	r3, r0, #1
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	d106      	bne.n	80037fa <__sflush_r+0x62>
 80037ec:	6829      	ldr	r1, [r5, #0]
 80037ee:	291d      	cmp	r1, #29
 80037f0:	d82b      	bhi.n	800384a <__sflush_r+0xb2>
 80037f2:	4a2a      	ldr	r2, [pc, #168]	@ (800389c <__sflush_r+0x104>)
 80037f4:	410a      	asrs	r2, r1
 80037f6:	07d6      	lsls	r6, r2, #31
 80037f8:	d427      	bmi.n	800384a <__sflush_r+0xb2>
 80037fa:	2200      	movs	r2, #0
 80037fc:	6062      	str	r2, [r4, #4]
 80037fe:	04d9      	lsls	r1, r3, #19
 8003800:	6922      	ldr	r2, [r4, #16]
 8003802:	6022      	str	r2, [r4, #0]
 8003804:	d504      	bpl.n	8003810 <__sflush_r+0x78>
 8003806:	1c42      	adds	r2, r0, #1
 8003808:	d101      	bne.n	800380e <__sflush_r+0x76>
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	b903      	cbnz	r3, 8003810 <__sflush_r+0x78>
 800380e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003812:	602f      	str	r7, [r5, #0]
 8003814:	b1b9      	cbz	r1, 8003846 <__sflush_r+0xae>
 8003816:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800381a:	4299      	cmp	r1, r3
 800381c:	d002      	beq.n	8003824 <__sflush_r+0x8c>
 800381e:	4628      	mov	r0, r5
 8003820:	f7ff fec2 	bl	80035a8 <_free_r>
 8003824:	2300      	movs	r3, #0
 8003826:	6363      	str	r3, [r4, #52]	@ 0x34
 8003828:	e00d      	b.n	8003846 <__sflush_r+0xae>
 800382a:	2301      	movs	r3, #1
 800382c:	4628      	mov	r0, r5
 800382e:	47b0      	blx	r6
 8003830:	4602      	mov	r2, r0
 8003832:	1c50      	adds	r0, r2, #1
 8003834:	d1c9      	bne.n	80037ca <__sflush_r+0x32>
 8003836:	682b      	ldr	r3, [r5, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0c6      	beq.n	80037ca <__sflush_r+0x32>
 800383c:	2b1d      	cmp	r3, #29
 800383e:	d001      	beq.n	8003844 <__sflush_r+0xac>
 8003840:	2b16      	cmp	r3, #22
 8003842:	d11e      	bne.n	8003882 <__sflush_r+0xea>
 8003844:	602f      	str	r7, [r5, #0]
 8003846:	2000      	movs	r0, #0
 8003848:	e022      	b.n	8003890 <__sflush_r+0xf8>
 800384a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384e:	b21b      	sxth	r3, r3
 8003850:	e01b      	b.n	800388a <__sflush_r+0xf2>
 8003852:	690f      	ldr	r7, [r1, #16]
 8003854:	2f00      	cmp	r7, #0
 8003856:	d0f6      	beq.n	8003846 <__sflush_r+0xae>
 8003858:	0793      	lsls	r3, r2, #30
 800385a:	680e      	ldr	r6, [r1, #0]
 800385c:	bf08      	it	eq
 800385e:	694b      	ldreq	r3, [r1, #20]
 8003860:	600f      	str	r7, [r1, #0]
 8003862:	bf18      	it	ne
 8003864:	2300      	movne	r3, #0
 8003866:	eba6 0807 	sub.w	r8, r6, r7
 800386a:	608b      	str	r3, [r1, #8]
 800386c:	f1b8 0f00 	cmp.w	r8, #0
 8003870:	dde9      	ble.n	8003846 <__sflush_r+0xae>
 8003872:	6a21      	ldr	r1, [r4, #32]
 8003874:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003876:	4643      	mov	r3, r8
 8003878:	463a      	mov	r2, r7
 800387a:	4628      	mov	r0, r5
 800387c:	47b0      	blx	r6
 800387e:	2800      	cmp	r0, #0
 8003880:	dc08      	bgt.n	8003894 <__sflush_r+0xfc>
 8003882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800388a:	81a3      	strh	r3, [r4, #12]
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003894:	4407      	add	r7, r0
 8003896:	eba8 0800 	sub.w	r8, r8, r0
 800389a:	e7e7      	b.n	800386c <__sflush_r+0xd4>
 800389c:	dfbffffe 	.word	0xdfbffffe

080038a0 <_fflush_r>:
 80038a0:	b538      	push	{r3, r4, r5, lr}
 80038a2:	690b      	ldr	r3, [r1, #16]
 80038a4:	4605      	mov	r5, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	b913      	cbnz	r3, 80038b0 <_fflush_r+0x10>
 80038aa:	2500      	movs	r5, #0
 80038ac:	4628      	mov	r0, r5
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	b118      	cbz	r0, 80038ba <_fflush_r+0x1a>
 80038b2:	6a03      	ldr	r3, [r0, #32]
 80038b4:	b90b      	cbnz	r3, 80038ba <_fflush_r+0x1a>
 80038b6:	f7ff fc8f 	bl	80031d8 <__sinit>
 80038ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f3      	beq.n	80038aa <_fflush_r+0xa>
 80038c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038c4:	07d0      	lsls	r0, r2, #31
 80038c6:	d404      	bmi.n	80038d2 <_fflush_r+0x32>
 80038c8:	0599      	lsls	r1, r3, #22
 80038ca:	d402      	bmi.n	80038d2 <_fflush_r+0x32>
 80038cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ce:	f7ff fe68 	bl	80035a2 <__retarget_lock_acquire_recursive>
 80038d2:	4628      	mov	r0, r5
 80038d4:	4621      	mov	r1, r4
 80038d6:	f7ff ff5f 	bl	8003798 <__sflush_r>
 80038da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038dc:	07da      	lsls	r2, r3, #31
 80038de:	4605      	mov	r5, r0
 80038e0:	d4e4      	bmi.n	80038ac <_fflush_r+0xc>
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	059b      	lsls	r3, r3, #22
 80038e6:	d4e1      	bmi.n	80038ac <_fflush_r+0xc>
 80038e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ea:	f7ff fe5b 	bl	80035a4 <__retarget_lock_release_recursive>
 80038ee:	e7dd      	b.n	80038ac <_fflush_r+0xc>

080038f0 <__swhatbuf_r>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	460c      	mov	r4, r1
 80038f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f8:	2900      	cmp	r1, #0
 80038fa:	b096      	sub	sp, #88	@ 0x58
 80038fc:	4615      	mov	r5, r2
 80038fe:	461e      	mov	r6, r3
 8003900:	da0d      	bge.n	800391e <__swhatbuf_r+0x2e>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	bf14      	ite	ne
 800390e:	2340      	movne	r3, #64	@ 0x40
 8003910:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003914:	2000      	movs	r0, #0
 8003916:	6031      	str	r1, [r6, #0]
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	b016      	add	sp, #88	@ 0x58
 800391c:	bd70      	pop	{r4, r5, r6, pc}
 800391e:	466a      	mov	r2, sp
 8003920:	f000 f848 	bl	80039b4 <_fstat_r>
 8003924:	2800      	cmp	r0, #0
 8003926:	dbec      	blt.n	8003902 <__swhatbuf_r+0x12>
 8003928:	9901      	ldr	r1, [sp, #4]
 800392a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800392e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003932:	4259      	negs	r1, r3
 8003934:	4159      	adcs	r1, r3
 8003936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393a:	e7eb      	b.n	8003914 <__swhatbuf_r+0x24>

0800393c <__smakebuf_r>:
 800393c:	898b      	ldrh	r3, [r1, #12]
 800393e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003940:	079d      	lsls	r5, r3, #30
 8003942:	4606      	mov	r6, r0
 8003944:	460c      	mov	r4, r1
 8003946:	d507      	bpl.n	8003958 <__smakebuf_r+0x1c>
 8003948:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	6123      	str	r3, [r4, #16]
 8003950:	2301      	movs	r3, #1
 8003952:	6163      	str	r3, [r4, #20]
 8003954:	b003      	add	sp, #12
 8003956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003958:	ab01      	add	r3, sp, #4
 800395a:	466a      	mov	r2, sp
 800395c:	f7ff ffc8 	bl	80038f0 <__swhatbuf_r>
 8003960:	9f00      	ldr	r7, [sp, #0]
 8003962:	4605      	mov	r5, r0
 8003964:	4639      	mov	r1, r7
 8003966:	4630      	mov	r0, r6
 8003968:	f7ff fe8a 	bl	8003680 <_malloc_r>
 800396c:	b948      	cbnz	r0, 8003982 <__smakebuf_r+0x46>
 800396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003972:	059a      	lsls	r2, r3, #22
 8003974:	d4ee      	bmi.n	8003954 <__smakebuf_r+0x18>
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	81a3      	strh	r3, [r4, #12]
 8003980:	e7e2      	b.n	8003948 <__smakebuf_r+0xc>
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	6020      	str	r0, [r4, #0]
 8003986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	9b01      	ldr	r3, [sp, #4]
 800398e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003992:	b15b      	cbz	r3, 80039ac <__smakebuf_r+0x70>
 8003994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003998:	4630      	mov	r0, r6
 800399a:	f000 f81d 	bl	80039d8 <_isatty_r>
 800399e:	b128      	cbz	r0, 80039ac <__smakebuf_r+0x70>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	431d      	orrs	r5, r3
 80039b0:	81a5      	strh	r5, [r4, #12]
 80039b2:	e7cf      	b.n	8003954 <__smakebuf_r+0x18>

080039b4 <_fstat_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	4d07      	ldr	r5, [pc, #28]	@ (80039d4 <_fstat_r+0x20>)
 80039b8:	2300      	movs	r3, #0
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	602b      	str	r3, [r5, #0]
 80039c2:	f7fd f814 	bl	80009ee <_fstat>
 80039c6:	1c43      	adds	r3, r0, #1
 80039c8:	d102      	bne.n	80039d0 <_fstat_r+0x1c>
 80039ca:	682b      	ldr	r3, [r5, #0]
 80039cc:	b103      	cbz	r3, 80039d0 <_fstat_r+0x1c>
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	bd38      	pop	{r3, r4, r5, pc}
 80039d2:	bf00      	nop
 80039d4:	20000230 	.word	0x20000230

080039d8 <_isatty_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d06      	ldr	r5, [pc, #24]	@ (80039f4 <_isatty_r+0x1c>)
 80039dc:	2300      	movs	r3, #0
 80039de:	4604      	mov	r4, r0
 80039e0:	4608      	mov	r0, r1
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	f7fd f813 	bl	8000a0e <_isatty>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_isatty_r+0x1a>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_isatty_r+0x1a>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000230 	.word	0x20000230

080039f8 <_sbrk_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4d06      	ldr	r5, [pc, #24]	@ (8003a14 <_sbrk_r+0x1c>)
 80039fc:	2300      	movs	r3, #0
 80039fe:	4604      	mov	r4, r0
 8003a00:	4608      	mov	r0, r1
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	f7fd f81c 	bl	8000a40 <_sbrk>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d102      	bne.n	8003a12 <_sbrk_r+0x1a>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	b103      	cbz	r3, 8003a12 <_sbrk_r+0x1a>
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	20000230 	.word	0x20000230

08003a18 <_init>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr

08003a24 <_fini>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr
